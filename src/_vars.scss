@use "sass:map";

// colors
$window: #ECEFF5;
$item-body: #FCFCFC;
$item-secondary: #CFD7E7;
// $control-header: #CFD7E7;
// $header: #CFD7E7;
$action-primary: #DC9D89;
$action-secondary: #CFD7E7;
$action-primary-active: #DC7858;
$action-secondary-active: #B9CBEB;
$text: #2B2D42;
$text-inverted: white;
$badge: #F1CF9C;
// outline colors as rgba to control alpha animation
$outline: rgba(220, 157, 137, 1); // same as action-primary
$outline-hidden: rgba(220, 157, 137, 0);
// darkmode colors 
$darkmode-map: (
  window: #2E3033,
  item-body: #3C3E42,
  item-secondary: #6B7C99,
  action-secondary: #6B7C99,
  action-secondary-active: #97AED6,
  text: #ECEFF5,
);

// vars
$fonts: 'Prompt', sans-serif;

// transition mixins
@mixin transition($property) {
  transition: $property 0.2s ease-out;
}
@mixin highlight {
  outline-color: $outline !important;
  outline-style: solid !important;
  outline-width: 0.1rem !important;
}
@mixin highlightable {
  outline-color: $outline-hidden;
  outline-style: none;
  outline-width: 0.1rem;
  transition: outline-color 0.2s ease-in; // transitioning outline-width looks jerky
}

/*  dark mode mixin
i prefer this simple approach over triple nested map loops that folks at medium suggest;
just declare your default property: color-variable and if you want it to be dark adaptive
@include this mixin with the same property and the same variable - this way you don't
need to refactor all your p:$var into includes and you still use autocomplete - you just
have to do the oh-so-hard-work of adding include and retyping two things */
@mixin darkmode($property, $color-variable) {
  @media (prefers-color-scheme: dark) {
    #{$property}: map.get($darkmode-map, $color-variable)
  }
}